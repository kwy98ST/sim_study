  # AMCL (Adaptive Monte Carlo Localization) 파라미터
  # 로봇의 위치를 추정(Localization)하기 위한 파티클 필터 알고리즘 설정
  amcl:
    ros__parameters:
      use_sim_time: False                               # 시뮬레이션 시간 사용 여부
      alpha1: 0.2                                     # 로봇의 회전 움직임으로 인한 오도메트리 회전 노이즈
      alpha2: 0.2                                     # 로봇의 직선 움직임으로 인한 오도메트리 회전 노이즈
      alpha3: 0.2                                     # 로봇의 직선 움직임으로 인한 오도메트리 직선 노이즈
      alpha4: 0.2                                     # 로봇의 회전 움직임으로 인한 오도메트리 직선 노이즈
      alpha5: 0.2                                     # (사용 안 함) 회전 노이즈
      base_frame_id: "base_footprint"                 # 로봇의 베이스 좌표계 ID
      beam_skip_distance: 0.5                         # 빔 건너뛰기 거리
      beam_skip_error_threshold: 0.9                  # 빔 건너뛰기 오류 임계값
      beam_skip_threshold: 0.3                        # 빔 건너뛰기 임계값
      do_beamskip: false                              # 빔 건너뛰기 기능 활성화 여부
      global_frame_id: "map"                          # 전역 좌표계 ID (보통 'map')
      lambda_short: 0.1                               # 예상치 못한 장애물에 대한 가중치 (z_short)
      laser_likelihood_max_dist: 2.0                  # 장애물 거리 계산 시 최대 유효 거리
      laser_max_range: 100.0                          # 레이저 스캐너의 최대 측정 가능 거리
      laser_min_range: -1.0                           # 레이저 스캐너의 최소 측정 가능 거리
      laser_model_type: "likelihood_field"            # 레이저 스캔 센서 모델 타입
      max_beams: 60                                   # 위치 추정에 사용할 최대 레이저 빔 수
      max_particles: 2000                             # 파티클 필터에서 사용할 최대 파티클 개수
      min_particles: 500                              # 파티클 필터에서 사용할 최소 파티클 개수
      odom_frame_id: "odom"                           # 오도메트리 좌표계 ID
      pf_err: 0.05                                    # 파티클 필터의 오차
      pf_z: 0.99                                      # 파티클 필터의 z값
      recovery_alpha_fast: 0.0                        # 빠른 복구 필터의 감쇠 계수 (0.0은 비활성화)
      recovery_alpha_slow: 0.0                        # 느린 복구 필터의 감쇠 계수 (0.0은 비활성화)
      resample_interval: 1                            # 파티클 리샘플링 주기
      robot_model_type: "nav2_amcl::DifferentialMotionModel" # 로봇 모션 모델 타입 (차동 구동)
      save_pose_rate: 0.5                             # 마지막 추정 위치를 저장하는 주기(초), -1.0은 비활성화
      sigma_hit: 0.2                                  # 센서 모델의 가우시안 분포 표준편차 (z_hit)
      tf_broadcast: true                              # map -> odom 변환(transform) 발행 여부
      transform_tolerance: 1.0                        # tf 변환 정보의 최대 대기 시간(초)
      update_min_a: 0.2                               # 필터 업데이트를 위한 최소 회전 이동량(라디안)
      update_min_d: 0.25                              # 필터 업데이트를 위한 최소 직선 이동량(미터)
      z_hit: 0.5                                      # 센서 모델에서 올바른 측정값에 대한 가중치
      z_max: 0.05                                     # 센서 모델에서 최대 거리 측정값에 대한 가중치
      z_rand: 0.5                                     # 센서 모델에서 무작위 측정값에 대한 가중치
      z_short: 0.05                                   # 센서 모델에서 예상치 못한 장애물에 대한 가중치
      scan_topic: scan_filtered                       # 사용할 레이저 스캔 토픽
      set_initial_pose: true                          # 초기 위치 설정 여부
      initial_pose: [0, 0, 0]                         # 초기 위치 [x, y, yaw]

  # BT Navigator (Behavior Tree Navigator) 파라미터
  # 행동 트리(Behavior Tree)를 이용해 전체 네비게이션 로직을 관리
  bt_navigator:
    ros__parameters:
      global_frame: map                               # 전역 좌표계
      robot_base_frame: base_footprint                # 로봇 베이스 좌표계
      odom_topic: /odom                               # 오도메트리 토픽
      bt_loop_duration: 10                            # 행동 트리 루프 실행 주기(ms)
      default_server_timeout: 20                      # 기본 서버 타임아웃(ms)
      wait_for_service_timeout: 1000                  # 서비스 대기 시간(ms)
      action_server_result_timeout: 900.0             # 액션 서버 결과 타임아웃(초)
      navigators: ["navigate_to_pose", "navigate_through_poses"] # 사용할 네비게이터 플러그인 목록
      navigate_to_pose:
        plugin: "nav2_bt_navigator::NavigateToPoseNavigator" # 단일 목표 지점 이동 플러그인
      navigate_through_poses:
        plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator" # 여러 경유지 이동 플러그인
      # 기본 행동 트리 XML 파일들이 사용됩니다.
      # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
      # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
      # 여기서 직접 설정하거나, 상위 런치 파일에서 재정의할 수 있습니다.

      # plugin_lib_names: []                           # 커스텀 BT 플러그인을 추가할 때 사용

      error_code_names:                               # 오류 코드 이름 목록
        - compute_path_error_code
        - follow_path_error_code

  # 전역 경로를 따라가기 위한 속도 명령(cmd_vel)을 생성

  # Controller Server 파라미터
  controller_server:
    ros__parameters:
      use_sim_time: False                             # 시뮬레이션 시간 사용 여부
      controller_frequency: 20.0                      # 제어기 실행 주기(Hz)
      min_x_velocity_threshold: 0.001                 # 최소 x축 속도 임계값
      goal_checker_plugins: ["general_goal_checker"]  # 사용할 목표 도달 확인 플러그인
      controller_plugins: ["FollowPath"]              # 사용할 지역 경로 계획 플러그인

      # 주행 진행 상황 확인 플러그인 파라미터
      progress_checker:
        plugin: "nav2_controller::SimpleProgressChecker"
        required_movement_radius: 0.5                 # 지정된 시간 내에 움직여야 하는 최소 반경(미터)
        movement_time_allowance: 10.0                 # 움직임 확인을 위한 허용 시간(초)
      
      # 목표 도달 확인 플러그인 파라미터
      general_goal_checker:
        stateful: True                                # 상태 유지 여부
        plugin: "nav2_controller::SimpleGoalChecker"
        xy_goal_tolerance: 0.05                       # 목표 지점 xy 허용 오차(미터)
        yaw_goal_tolerance: 0.1                       # 목표 지점 yaw(회전) 허용 오차(라디안)

      # MPPI (Model Predictive Path Integral) 지역 경로 계획기 파라미터
      FollowPath:
        plugin: "nav2_mppi_controller::MPPIController"
        
        # 1. 샘플링 및 예측: 좁은 공간 대응력 향상
        time_steps: 42              # 2.1초 예측 (42 * 0.05s)
        model_dt: 0.05              # 컨트롤러 주기(1/20Hz)와 일치
        batch_size: 2000            # 더 많은 경로를 탐색하여 좁은 공간에서 최적 경로를 찾을 확률 증가
        iteration_count: 1
        
        # 2. 로봇 기구학 (사용자 로봇에 맞게 수정 필요)
        vx_max: 0.25                # 최대 속도는 약간 보수적으로 시작
        vx_min: -0.15               # 후진 속도
        wz_max: 0.8                 # 최대 회전 속도
        ax_max: 1.0
        ax_min: -0.8
        az_max: 2.5
        motion_model: "DiffDrive"   

        # 3. 경로 추종 관련
        transform_tolerance: 0.2
        prune_distance: 2.0         # 예측 거리보다 약간 길게 설정

        # 4. 시각화 (튜닝 시 필수!)
        visualize: true

        # 5. Critic (평가 함수) 설정 - 좁은 공간 주행 최적화
        critics: ["ConstraintCritic", "CostCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PreferForwardCritic"]
        
        ConstraintCritic:
          enabled: true
          cost_power: 1
          cost_weight: 5.0

        GoalCritic:
          enabled: true
          cost_power: 1
          cost_weight: 4.0
          threshold_to_consider: 1.2

        GoalAngleCritic:
          enabled: true
          cost_power: 1
          cost_weight: 2.5
          threshold_to_consider: 0.6

        PreferForwardCritic:
          enabled: true
          cost_power: 2
          cost_weight: 10.0
          threshold_to_consider: 0.6
        
        # ⭐ 핵심: 장애물 회피 Critic
        CostCritic:
          enabled: true
          cost_power: 1
          cost_weight: 2.5          # 경로 추종보다 가중치를 높여 장애물 회피를 우선시
          critical_cost: 300.0      # 이 비용 이상의 경로는 심한 페널티 부여
          consider_footprint: true  # ⭐ 직사각형 로봇이므로 반드시 true로 설정!
          collision_cost: 10000.0 # 충돌 경로에 대한 비용
          near_goal_distance: 0.4
          
        # ⭐ 핵심: 경로 추종 Critic
        PathAlignCritic:            
          enabled: true
          cost_power: 1
          cost_weight: 10.0          # 장애물 회피를 위해 약간 낮은 가중치 부여
          threshold_to_consider: 0.5
          max_path_occupancy_ratio: 0.1 # 경로 주변에 장애물이 많아도 경로를 따르도록 허용
          
        PathFollowCritic:
          enabled: true
          cost_power: 1
          cost_weight: 4.0          # PathAlign과 유사한 가중치로 시작
          threshold_to_consider: 1.2

      # DWB (Dynamic Window Approach) 지역 경로 계획기 파라미터
      # FollowPath:
      #   plugin: "dwb_core::DWBLocalPlanner"           # DWB 플러그인 사용
      #   debug_trajectory_details: True                # 경로 상세 정보 디버깅 여부
      #   min_vel_x: -0.1                                # 최소 x축 속도(m/s) (0.0은 후진 비허용)
      #   min_vel_y: 0.0                                # 최소 y축 속도(m/s)
      #   max_vel_x: 0.25                               # 최대 x축 속도(m/s)
      #   max_vel_y: 0.0                                # 최대 y축 속도(m/s) (0.0은 제자리 회전만 허용)
      #   max_vel_theta: 0.7                            # 최대 회전 속도(rad/s)
      #   min_speed_xy: 0.0                             # 최소 xy 평면 속도(m/s)
      #   max_speed_xy: 0.25                            # 최대 xy 평면 속도(m/s)
      #   min_speed_theta: 0.0                          # 최소 회전 속도(rad/s)
      #   acc_lim_x: 0.9                                # x축 최대 가속도(m/s^2)
      #   acc_lim_y: 0.0                                # y축 최대 가속도(m/s^2)
      #   acc_lim_theta: 2.0                            # 회전 최대 가속도(rad/s^2)
      #   decel_lim_x: -0.5                             # x축 최대 감속도(m/s^2)
      #   decel_lim_y: 0.0                              # y축 최대 감속도(m/s^2)
      #   decel_lim_theta: -2.0                         # 회전 최대 감속도(rad/s^2)
      #   vx_samples: 20                                # x축 속도 샘플링 개수
      #   vy_samples: 5                                 # y축 속도 샘플링 개수
      #   vtheta_samples: 20                            # 회전 속도 샘플링 개수
      #   sim_time: 1.5                                 # 미래 경로 예측 시간(초)
      #   linear_granularity: 0.05                      # 경로 샘플링의 직선 해상도(미터)
      #   angular_granularity: 0.03                    # 경로 샘플링의 각도 해상도(라디안)
      #   transform_tolerance: 0.2                      # tf 변환 정보의 최대 대기 시간(초)
      #   xy_goal_tolerance: 0.15                       # 목표 지점 xy 허용 오차(미터)
      #   trans_stopped_velocity: 0.25                  # 정지 상태로 간주할 병진 속도
      #   short_circuit_trajectory_evaluation: True     # 유효하지 않은 경로 평가를 조기에 중단할지 여부
      #   stateful: True                                # 상태 유지 여부
      #   critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"] # 경로 평가 기준 목록
      #   BaseObstacle.scale: 0.04                      # 장애물 회피 기준의 가중치
      #   PathAlign.scale: 32.0                         # 전역 경로 정렬 기준의 가중치
      #   PathAlign.forward_point_distance: 0.1         # 전역 경로 정렬 시 바라볼 앞 점까지의 거리
      #   GoalAlign.scale: 24.0                         # 목표 지점 정렬 기준의 가중치
      #   GoalAlign.forward_point_distance: 0.1         # 목표 지점 정렬 시 바라볼 앞 점까지의 거리
      #   PathDist.scale: 32.0                          # 전역 경로와의 거리 기준의 가중치
      #   GoalDist.scale: 24.0                          # 목표 지점과의 거리 기준의 가중치
      #   RotateToGoal.scale: 32.0                      # 목표 지점 방향 회전 기준의 가중치
      #   RotateToGoal.slowing_factor: 5.0              # 목표 지점 근처에서 회전 시 감속 계수
      #   RotateToGoal.lookahead_time: -1.0             # 목표 지점 회전 시 예측 시간 (-1.0은 sim_time 사용)

  # Local Costmap 파라미터
  # 로봇 주변의 장애물 정보를 실시간으로 반영하는 지역 비용 지도
  local_costmap:
    local_costmap:
      ros__parameters:
        update_frequency: 10.0                        # 비용 지도 업데이트 주기(Hz)
        publish_frequency: 5.0                        # 비용 지도 발행 주기(Hz)
        global_frame: odom                            # 지역 지도의 기준이 될 전역 좌표계 (보통 'odom')
        robot_base_frame: base_link                   # 로봇의 베이스 좌표계
        use_sim_time: False                           # 시뮬레이션 시간 사용 여부
        rolling_window: true                          # 로봇을 중심으로 지도가 움직이는 '롤링 윈도우' 방식 사용 여부
        width: 5                                      # 지도 너비(미터)
        height: 5                                     # 지도 높이(미터)
        resolution: 0.05                              # 지도 해상도(미터/셀)
        footprint: '[[0.1, 0.24], [0.1, -0.24], [-0.5, -0.2], [-0.5, 0.2]]' # 로봇의 모양(footprint)
        footprint_padding: 0.02                       # footprint 주변의 여유 공간
        plugins: ["voxel_layer", "inflation_layer"]   # 사용할 비용 지도 레이어 플러그인 목록
        inflation_layer:
          plugin: "nav2_costmap_2d::InflationLayer"   # 장애물 주변에 팽창 영역(비용 증가)을 만드는 레이어
          cost_scaling_factor: 3.0                    # 팽창 비용 감소 계수
          inflation_radius: 0.7                      # 장애물로부터 팽창시킬 반경(미터)
        voxel_layer:
          plugin: "nav2_costmap_2d::VoxelLayer"       # 3D 포인트 클라우드 데이터를 2D 비용 지도에 투영하는 레이어
          enabled: True                               # 활성화 여부
          publish_voxel_map: True                     # Voxel 지도 발행 여부
          origin_z: 0.0                               # z축 원점
          z_resolution: 0.05                          # z축 해상도
          z_voxels: 16                                # z축 복셀 개수
          max_obstacle_height: 2.0                    # 장애물로 인식할 최대 높이(미터)
          mark_threshold: 0                           # 장애물로 표시할 셀의 최소 포인트 수
          observation_sources: scan                   # 센서 데이터 소스 이름
          scan:
            topic: /scan_filtered                     # 사용할 센서 토픽
            max_obstacle_height: 2.0                  # 장애물로 처리할 최대 높이
            clearing: True                            # 센서 데이터로 장애물이 없어진 영역을 지도에서 제거할지 여부
            marking: True                             # 센서 데이터로 장애물이 감지된 영역을 지도에 표시할지 여부
            data_type: "LaserScan"                    # 센서 데이터 타입
            raytrace_max_range: 5.0                   # 장애물 제거를 위한 레이저 최대 추적 거리
            raytrace_min_range: 0.0                   # 장애물 제거를 위한 레이저 최소 추적 거리
            obstacle_max_range: 4.5                   # 장애물 표시를 위한 레이저 최대 거리
            obstacle_min_range: 0.0                   # 장애물 표시를 위한 레이저 최소 거리
        static_layer:
          plugin: "nav2_costmap_2d::StaticLayer"      # 정적 지도 레이어 (보통 전역 비용 지도에서 사용)
          map_subscribe_transient_local: True         # 지도 토픽에 대해 transient local QoS 사용
        always_send_full_costmap: True                # 항상 전체 비용 지도를 발행할지 여부

  # Global Costmap 파라미터
  # 전체 환경에 대한 정적 지도와 동적 장애물 정보를 포함하는 전역 비용 지도
  global_costmap:
    global_costmap:
      ros__parameters:
        update_frequency: 1.0                         # 비용 지도 업데이트 주기(Hz)
        publish_frequency: 1.0                        # 비용 지도 발행 주기(Hz)
        global_frame: map                             # 전역 지도의 기준이 될 좌표계 (보통 'map')
        robot_base_frame: base_footprint              # 로봇의 베이스 좌표계
        use_sim_time: False
        footprint: '[[0.1, 0.24], [0.1, -0.24], [-0.5, -0.2], [-0.5, 0.2]]'                           # 시뮬레이션 시간 사용 여부
        resolution: 0.05                              # 지도 해상도(미터/셀)
        track_unknown_space: true                     # 탐색되지 않은 공간을 추적할지 여부
        plugins: ["static_layer", "obstacle_layer", "inflation_layer"] # 사용할 비용 지도 레이어 플러그인
        obstacle_layer:
          plugin: "nav2_costmap_2d::ObstacleLayer"    # 센서 데이터로부터 동적 장애물을 추가하는 레이어
          enabled: True                               # 활성화 여부
          observation_sources: scan                   # 센서 데이터 소스 이름
          scan:
            topic: /scan_filtered                     # 사용할 센서 토픽
            max_obstacle_height: 2.0                  # 장애물로 처리할 최대 높이
            clearing: True                            # 장애물 제거 여부
            marking: True                             # 장애물 표시 여부
            data_type: "LaserScan"                    # 센서 데이터 타입
            raytrace_max_range: 4.0                   # 장애물 제거를 위한 레이저 최대 추적 거리
            raytrace_min_range: 0.0                   # 장애물 제거를 위한 레이저 최소 추적 거리
            obstacle_max_range: 3.5                   # 장애물 표시를 위한 레이저 최대 거리
            obstacle_min_range: 0.0                   # 장애물 표시를 위한 레이저 최소 거리
        static_layer:
          plugin: "nav2_costmap_2d::StaticLayer"      # 정적 지도를 불러오는 레이어
          map_subscribe_transient_local: True         # 지도 토픽에 대해 transient local QoS 사용
        inflation_layer:
          plugin: "nav2_costmap_2d::InflationLayer"   # 팽창 레이어
          cost_scaling_factor: 3.0                    # 팽창 비용 감소 계수
          inflation_radius: 0.7                        # 팽창 반경(미터)
        always_send_full_costmap: True                # 항상 전체 비용 지도를 발행할지 여부

  # Map Server 파라미터
  # 저장된 지도를 불러와 토픽으로 발행
  map_server:
    ros__parameters:
      use_sim_time: False                             # 시뮬레이션 시간 사용 여부
      yaml_filename: ""                               # 불러올 지도 메타데이터 파일(.yaml) 경로 (보통 런치파일에서 설정)

  # Map Saver 파라미터
  # 현재 지도를 파일로 저장
  map_saver:
    ros__parameters:
      use_sim_time: False                             # 시뮬레이션 시간 사용 여부
      save_map_timeout: 5.0                           # 지도 저장 타임아웃(초)
      free_thresh_default: 0.25                       # 빈 공간으로 판단할 임계값
      occupied_thresh_default: 0.65                   # 장애물 공간으로 판단할 임계값
      map_subscribe_transient_local: True             # 지도 토픽에 대해 transient local QoS 사용

  # Planner Server (Global Planner) 파라미터
  # 현재 위치에서 목표 지점까지의 전역 경로를 생성
  planner_server:
    ros__parameters:
      expected_planner_frequency: 20.0                # 경로 계획기 예상 실행 주기(Hz)
      planner_plugins: ["GridBased"]                  # 사용할 전역 경로 계획 플러그인
      costmap_update_timeout: 1.0                     # 코스트맵 업데이트 대기 시간
      GridBased:
        plugin: "nav2_smac_planner::SmacPlannerHybrid" # In Iron and older versions, "/" was used instead of "::"
        downsample_costmap: false           # whether or not to downsample the map
        downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
        tolerance: 0.15                     # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
        allow_unknown: true                 # allow traveling in unknown space
        max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
        max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
        max_planning_time: 5.0              # max time in s for planner to plan, smooth
        motion_model_for_search: "REEDS_SHEPP"    # Hybrid-A* Dubin, Redds-Shepp
        angle_quantization_bins: 72         # Number of angle bins for search
        analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
        analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
        analytic_expansion_max_cost: 200.0  # The maximum single cost for any part of an analytic expansion to contain and be valid, except when necessary on approach to goal
        analytic_expansion_max_cost_override: false  #  Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required)
        minimum_turning_radius: 0.2        # minimum turning radius in m of path / vehicle
        reverse_penalty: 2.5            # Penalty to apply if motion is reversing, must be => 1
        change_penalty: 0.0                 # Penalty to apply if motion is changing directions (L to R), must be >= 0
        non_straight_penalty: 1.1          # Penalty to apply if motion is non-straight, must be => 1
        cost_penalty: 1.55          # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
        retrospective_penalty: 0.015
        lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
        cache_obstacle_heuristic: false     # Cache the obstacle map dynamic programming distance expansion heuristic between subsequent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
        debug_visualizations: true         # For Hybrid nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
        use_quadratic_cost_penalty: False
        downsample_obstacle_heuristic: True
        allow_primitive_interpolation: False
        coarse_search_resolution: 4         # Number of bins to skip when doing a coarse search for the path. Only used for all_direction goal heading mode.
        goal_heading_mode: "DEFAULT"        # DEFAULT, BIDIRECTIONAL, ALL_DIRECTION
        smooth_path: True                   # If true, does a simple and quick smoothing post-processing to the path

        smoother:
          max_iterations: 1000
          w_smooth: 0.3
          w_data: 0.2
          tolerance: 1.0e-10
          do_refinement: true
          refinement_num: 2
      # GridBased:
      #   plugin: "nav2_smac_planner::SmacPlanner2D" # In Iron and older versions, "/" was used instead of "::"
      #   tolerance: 0.125                      # tolerance for planning if unable to reach exact pose, in meters
      #   downsample_costmap: false             # whether or not to downsample the map
      #   downsampling_factor: 1                # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      #   allow_unknown: true                   # allow traveling in unknown space
      #   max_iterations: 1000000               # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      #   max_on_approach_iterations: 1000      # maximum number of iterations to attempt to reach goal once in tolerance
      #   max_planning_time: 2.0                # max time in s for planner to plan, smooth
      #   cost_travel_multiplier: 2.0           # Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      #   use_final_approach_orientation: false # Whether to set the final path pose at the goal's orientation to the requested orientation (false) or in line with the approach angle so the robot doesn't rotate to heading (true)
      #   smoother:
      #     max_iterations: 1000
      #     w_smooth: 0.3
      #     w_data: 0.2
      #     tolerance: 1.0e-10


  # Smoother Server 파라미터
  # 전역 경로를 부드럽게 만들어주는 서버
  # smoother_server:
  #   ros__parameters:
  #     use_sim_time: False                             # 시뮬레이션 시간 사용 여부
  #     smoother_plugins: ["simple_smoother"]           # 사용할 경로 스무딩 플러그인
  #     simple_smoother:
  #       plugin: "nav2_smoother::SimpleSmoother"       # Simple Smoother 플러그인
  #       tolerance: 1.0e-10                            # 허용 오차
  #       max_its: 1000                                 # 최대 반복 횟수
  #       do_refinement: True                           # 경로 개선 작업 수행 여부

  # Behavior Server 파라미터
  # 주행 실패 시 수행할 복구 행동들을 관리
  behavior_server:
    ros__parameters:
      local_costmap_topic: local_costmap/costmap_raw   # 지역 비용 지도 토픽
      global_costmap_topic: global_costmap/costmap_raw # 전역 비용 지도 토픽
      local_footprint_topic: local_costmap/published_footprint  # 지역 footprint 토픽
      global_footprint_topic: global_costmap/published_footprint # 전역 footprint 토픽
      cycle_frequency: 10.0                           # 실행 주기(Hz)
      behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"] # 사용할 행동 플러그인 목록
      spin:
        plugin: "nav2_behaviors::Spin"                # 제자리 회전 행동
      backup:
        plugin: "nav2_behaviors::BackUp"              # 후진 행동
      drive_on_heading:
        plugin: "nav2_behaviors::DriveOnHeading"      # 특정 방향으로 직진 행동
      wait:
        plugin: "nav2_behaviors::Wait"                # 대기 행동
      assisted_teleop:
        plugin: "nav2_behaviors::AssistedTeleop"      # 보조 원격 조작 행동
      local_frame: odom                               # 지역 좌표계
      global_frame: map                               # 전역 좌표계
      robot_base_frame: base_link                     # 로봇 베이스 좌표계
      transform_tolerance: 0.1                        # tf 변환 정보 최대 대기 시간(초)
      simulate_ahead_time: 2.0                        # 행동 시뮬레이션 시간(초)
      max_rotational_vel: 1.0                         # 최대 회전 속도(rad/s)
      min_rotational_vel: 0.4                         # 최소 회전 속도(rad/s)
      rotational_acc_lim: 3.2                         # 회전 가속도 제한(rad/s^2)

  # Robot State Publisher 파라미터
  # 로봇의 URDF 모델을 기반으로 각 관절의 상태(tf)를 발행
  robot_state_publisher:
    ros__parameters:
      use_sim_time: False                             # 시뮬레이션 시간 사용 여부

  # Waypoint Follower 파라미터
  # 지정된 여러 경유지(waypoint)를 순차적으로 따라 주행
  waypoint_follower:
    ros__parameters:
      use_sim_time: False                             # 시뮬레이션 시간 사용 여부
      loop_rate: 20                                   # 루프 실행 주기(Hz)
      stop_on_failure: false                          # 경유지 주행 실패 시 정지 여부
      waypoint_task_executor_plugin: "wait_at_waypoint" # 경유지 도착 시 실행할 작업 플러그인
      wait_at_waypoint:
        plugin: "nav2_waypoint_follower::WaitAtWaypoint" # 경유지에서 대기하는 플러그인
        enabled: True                                 # 활성화 여부
        waypoint_pause_duration: 50                   # 경유지에서 대기할 시간

  # Velocity Smoother 파라미터
  # 로봇에 전달되는 속도 명령(cmd_vel)을 부드럽게 조절
  velocity_smoother:
    ros__parameters:
      use_sim_time: False                             # 시뮬레이션 시간 사용 여부
      smoothing_frequency: 20.0                       # 스무딩 실행 주기(Hz)
      scale_velocities: False                         # 속도 스케일링 여부
      feedback: "CLOSED_LOOP"                         # 피드백 방식 (OPEN_LOOP, CLOSED_LOOP)
      max_velocity: [0.25, 0.0, 1.0]                  # 최대 속도 [x, y, theta]
      min_velocity: [-0.25, 0.0, -1.0]                # 최소 속도 [x, y, theta]
      max_accel: [1.8, 0.0, 2.0]                      # 최대 가속도 [x, y, theta]
      max_decel: [-1.8, 0.0, -2.0]                    # 최대 감속도 [x, y, theta]
      odom_topic: "odom"                              # 오도메트리 토픽
      odom_duration: 0.1                              # 오도메트리 데이터 사용 기간
      deadband_velocity: [0.0, 0.0, 0.0]              # 0으로 처리할 속도 임계값 [x, y, theta]
      velocity_timeout: 1.0                           # 속도 명령 타임아웃(초)